<?php

// TODO: Rotas definidas nos controllers
// TODO: api.php gerado automaticamente
// TODO: Melhoria nos componentes ui-file, ui-file-id e ui-file-select

namespace App\Console\Commands;

class AppReadmeGenerate extends AppBase
{

    protected $signature = 'app:readme-generate';
    protected $description = 'Gera documentaÃ§Ã£o';

    public function handle() {
        $this->tables = $this->getTables();
        // $this->fks = $this->getFks();
        
        $file = [ '# '. env('APP_NAME') ];
        
        $file[] = '## InstalaÃ§Ã£o';
        $file[] = 'Insira os dados do banco no arquivo `.env` e entÃ£o execute';
        $file[] = 'os comandos abaixo, que respectivamente sÃ£o para:';
        $file[] = '* Instalar dependÃªncias do laravel';
        $file[] = '* Criar tabelas, models, controllers, views e registros do banco';
        $file[] = '* Acessar pasta `/client`';
        $file[] = '* Instalar dependÃªncias javascript nesta pasta';

        $file[] = $this->cmd('bash', [
            'php composer install',
            'php artisan app:sync',
            'cd client',
            'npm install',
        ]);

        $file[] = '';

        $file[] = '## Desenvolvimento';
        $file[] = 'O comando abaixo executa backend+frontend juntos:';
        $file[] = $this->cmd('bash', 'npm run serve');
        $file[] = '';


        $file[] = '## Deploy';
        $file[] = 'O comando abaixo faz a build e prepara a aplicaÃ§Ã£o para publicaÃ§Ã£o';
        $file[] = $this->cmd('bash', 'npm run build');
        $file[] = '';


        $file[] = '## Criando tabelas no banco';
        $file[] = 'Criar tabelas na mÃ£o pode ser um pouco maÃ§ante, mesmo utilizando sua ferramente favorita para gerenciÃ¡-las.';
        $file[] = 'Execute o comando abaixo para criar uma tabela bÃ¡sica, e a partir dela modelar conforme necessÃ¡rio:';
        $file[] = $this->cmd('bash', 'php artisan app:table-generate');
        $file[] = 'O comando irÃ¡ lhe pedir um nome para a tabela, e a partir disso,';
        $file[] = 'gerÃ¡-la com as colunas `id, slug, name, created_at, updated_at e deleted_at`.';
        $file[] = 'VocÃª pode renomear ou remover alguma dessas colunas caso necessÃ¡rio,';
        $file[] = '**embora seja fortemente sujerido que vocÃª as mantenha**, visto que';
        $file[] = 'o sistema as usa para que vocÃª precise digitar o mÃ­nimo de cÃ³digo possÃ­vel.';
        $file[] = '';
        $file[] = 'NÃ£o se esqueÃ§a de executar o comando abaixo assim que criar ou modificar uma tabela';
        $file[] = 'para que o sistema gere ou customize as models, controllers e views para vocÃª';
        $file[] = $this->cmd('bash', 'php artisan app:sync');
        $file[] = '';


        $file[] = '## Models';
        $file[] = 'Estas sÃ£o todas as models disponÃ­veis no sistema:';
        $file[] = '```php';
        foreach($this->tables as $table) {
            if ($this->isIgnoredTable($table->Name)) continue;
            $file[] = "{$table->Model->NameFull};";
        }
        $file[] = '```';
        $file[] = '';


        $file[] = '## Customizando models';
        $file[] = 'Todas as models tem essa estrutura bÃ¡sica';
        $file[] = $this->cmd('php', [
            '<?php',
            '',
            'namespace App\Models;',
            '',
            '// Nomes de model sÃ£o sempre gerados no plural, igual as tabelas',
            'class Products extends \Illuminate\Database\Eloquent\Model {',
            "",
            "   // Muitas mÃ¡gicas sÃ£o geradas atravÃ©s dessa trait",
            "   use \App\Traits\Model;",
            "   ",
            "   // Nomes de tabelas sempre no plural",
            "   protected \$table = 'products';",
            "   protected \$fillable = ['id', 'slug', 'name', 'price', 'created_at', 'updated_at', 'deleted_at'];",
            "",
            "   /*",
            "    * Esse mÃ©todo Ã© sempre executado antes de salvar/exibir dados",
            "    * para forÃ§ar que valores sigam um determinado padrÃ£o.",
            "    * VocÃª ainda pode utilizar mutators normalmente, esse mÃ©todo",
            "    * foi criado apenas para simplificar a vida.",
            "    */",
            "   public function modelMutator()",
            "   {",
            "       \$this->price = \$this->price? \$this->price: 0;",
            "   }",
            "",
            "   /*",
            "    * A trait Model faz com que os dados sejam sempre validados antes de salvar,",
            "    * e caso algum erro seja encontrado, uma exceÃ§Ã£o Ã© jogada. Isso garante consistÃªncia",
            "    * ao que entra no banco impedindo que dados invÃ¡lidos passem.",
            "    * Ã‰ nesse mÃ©todo que definimos as regras de validaÃ§Ã£o do Laravel.",
            "    * As regras sÃ£o criadas dentro de um mÃ©todo para que vocÃª possa criar regras",
            "    * condicionais, caso precise por exemplo, definir uma regra especÃ­fica",
            "    * quando o \$this->id conter um valor.",
            "    */",
            "   public function validationRules()",
            "   {",
            "       return [",
            "           'name' => ['required'],",
            "       ];",
            "   }",
            "",
            "   /*",
            "    * Todas as buscas sÃ£o feitas pelo mÃ©todo ->search() da model,",
            "    * e para que esse mÃ©todo funcione bem, precisamos informar a ele",
            "    * quais sÃ£o os parÃ¢metros padrÃ£o para uma busca. Os parÃ¢metros informados",
            "    * aqui serÃ£o mergeados a outros parÃ¢metros bÃ¡sicos, como q, page, perpage,",
            "    * order, orderby e outros.",
            "    */",
            "   public function searchParams(\$params=[])",
            "   {",
            "       return [",
            "           'price_min' => null",
            "           'price_max' => null",
            "       ];",
            "   }",
            "",
            "   /*",
            "    * Como jÃ¡ explicado, todas as buscas sÃ£o feitas pelo mÃ©todo ->search()",
            "    * e aqui vamos customizar a \$query de busca antes que ela seja entregue",
            "    * para o ->search() executar. Trabalhar dessa forma Ã© interessante porque",
            "    * vocÃª vai reaproveitar muito mais concentrando toda a lÃ³gica de busca aqui",
            "    * em vez de ficar copiando e colando linhas e mais linhas de queryBuilder",
            "    * todas as vezes que precisar fazer uma busca nova.",
            "    */",
            "   public function searchQuery(\$query, \$params)",
            "   {",
            "       if (\$params->price_min) {",
            "           \$query->where('price', '>=', \$params->price_min);",
            "       }",
            "",
            "       if (\$params->price_max) {",
            "           \$query->where('price', '<=', \$params->price_max);",
            "       }",
            "   }",
            '}',
        ]);
        $file[] = 'Essa estrutura Ã© gerada automaticamente quando vocÃª cria uma tabela.';
        $file[] = 'A array `protected $fillable` tambÃ©m Ã© alterada quando vocÃª cria/remove alguma';
        $file[] = 'no banco e executa `php artisan app:sync`.';
        $file[] = 'VocÃª pode criar seus mÃ©todos, casts, mutators e o que mais for necessÃ¡rio';
        $file[] = 'para sua model aqui normalmente. A Ãºnica exigÃªncia das models sÃ£o:';
        $file[] = '**NÃƒO REMOVA A TRAIT MODEL**. Ela Ã© responsÃ¡vel por muitas coisas que vÃ£o te ajudar';
        $file[] = 'a ter menos dor de cabeÃ§a para desenvolver.';
        $file[] = '';


        $file[] = '## Busca';
        $file[] = 'Sempre que vocÃª precisar buscar dados nos bancos, Ã© aconselhÃ¡vel usar o';
        $file[] = 'mÃ©todo `->search()` da model. Porque? PorquÃª Ã© mais interessante concentrar';
        $file[] = 'toda a lÃ³gica de busca em um mÃ©todo sÃ³, em vez de ficar duplicando linhas de';
        $file[] = 'queryBuilder toda vez que precisar listar itens novamente.';
        $file[] = $this->cmd('php', '$query = $model->search();');
        $file[] = 'Este mÃ©todo retorna um queryBuilder, entÃ£o vocÃª jÃ¡ deve ter compreendido que';
        $file[] = 'com esse valor que retorna, vocÃª pode executar um `->paginate()` para obter dados';
        $file[] = 'paginados, um `->get()` para recuperar todos os itens possÃ­veis ou um `->first()`';
        $file[] = 'para obter apenas o primeiro registro.';
        $file[] = $this->cmd('php', [
            '$item = $model->search()->first();',
            '$items = $model->search()->get();',
            '$data = $model->search()->paginate(15);',
        ]);
        $file[] = 'VocÃª tambÃ©m pode concatenar outros mÃ©todos, mas se vocÃª quer ter um cÃ³digo';
        $file[] = 'reaproveitÃ¡vel, talvez seja melhor criar um novo parmÃ¢metro em `searchParams`';
        $file[] = 'e programar a lÃ³gica desse parÃ¢metro em `searchQuery`.';
        $file[] = $this->cmd('php', [
            '// Funciona, mas vocÃª sempre vai ter que inserir esse where ðŸ™„',
            '$item = $model->search()->where(\'status\', \'public\')->get();',
            '',
            '// Programando em searchParams e searchQuery fica mais reaproveitÃ¡vel ðŸ˜Ž',
            '$item = $model->search([\'status\' => \'public\'])->get();',
        ]);
        $file[] = '';


        $file[] = '## Controllers';
        $file[] = 'Estes sÃ£o todos os controllers disponÃ­veis no sistema:';
        $file[] = '```php';
        foreach($this->tables as $table) {
            if ($this->isIgnoredTable($table->Name)) continue;
            $file[] = "{$table->Controller->NameFull};";
        }
        $file[] = '```';
        $file[] = '';


        $file[] = '## Customizando controllers';
        $file[] = 'Note que o arquivo `/routes/api.php` Ã© bem limpo: tem apenas';
        $file[] = 'alguns controllers sendo instanciados e um aviso de "nÃ£o edite":';
        $file[] = $this->cmd('php', file_get_contents(base_path('routes/api.php')));
        $file[] = 'Este arquivo Ã© gerado sempre que vocÃª executa `php artisan app:sync`,';
        $file[] = 'por isso Ã© uma mÃ¡ ideia editÃ¡-lo. Isso acontece porque as rotas';
        $file[] = 'sÃ£o definidas no prÃ³prio controller. As funÃ§Ãµes bÃ¡sicas estÃ£o comentadas:';
        $file[] = $this->cmd('php', [
            "<?php",
            "",
            "namespace App\Http\Controllers;",
            "",
            "class ProductsController extends Controller",
            "{",
            "	public function __construct()",
            "	{",
            "		/*",
            "		 * ReferÃªncia para as rotas herdadas da classe Controller saberem",
            "		 * com qual model estÃ£o trabalhando.",
            "		 */",
            "		\$this->model = new \App\Models\Products;",
            "",
            "		/*",
            "		 * Aqui estÃ¡ sendo declarado que todas as rotas deste controller",
            "		 * serÃ£o protegidas pelo middleware de autenticaÃ§Ã£o,",
            "		 * exceto as rotas search e find que serÃ£o pÃºblicas.",
            "		 */",
            "		\$this->middleware('auth:api', [",
            "			'except' => ['search', 'find'],",
            "		]);",
            "",
            "		/*",
            "		 * Este mÃ©todo cria rotas bÃ¡sicas em comum para todos os controllers,",
            "		 * como save, search, find, delete, clone e alguns outros.",
            "		 * Note o argumento \"except\": ele define quais dessas rotas",
            "		 * nÃ£o devem ser criadas. O exemplo abaixo define que este controller",
            "		 * nÃ£o terÃ¡ a rota /delete.",
            "		 */",
            "		\$this->defaultRoutes([",
            "		    'except' => ['delete'],",
            "		]);",
            "",
            "		/*",
            "		 * Aqui vocÃª pode definir rotas customizadas.",
            "		 * As rotas sempre serÃ£o criadas tomando como base o nome do controller",
            "		 * convertido para kebab case sem o sufixo \"Controller\". Ou seja:",
            "		 * ",
            "		 * FooController        =>  /api/foo/ ",
            "		 * FooBarController     =>  /api/foo-bar/ ",
            "		 * FooBarBazController  =>  /api/foo-bar-baz/ ",
            "		 * ",
            "		 * Conforme o exemplo dado, todas as rotas serÃ£o criadas",
            "		 * dentro de /api/products.",
            "		 * ",
            "		 * parÃ¢metro 1 = mÃ©todo (pode ser array ['get', 'post'] por exemplo)",
            "		 * parÃ¢metro 2 = rota",
            "		 * parÃ¢metro 3 = mÃ©todo do controller que serÃ¡ executado",
            "		 */",
            "",
            "		// POST: /api/products/{productId}/promo-add",
            "		\$this->route('post', '/{productId}/promo-add', 'promoAdd');",
            "",
            "		// GET: /api/products/{productId}/promo-remove/{promoId}",
            "		\$this->route('get', '/{productId}/promo-remove/{promoId}', 'promoRemove');",
            "	}",
            "",
            "   public function promoAdd(\$productId)",
            "   {",
            "       return ['bla bla bla'];",
            "   }",
            "",
            "   public function promoRemove(\$productId, \$promoId)",
            "   {",
            "       return ['bla bla bla'];",
            "   }",
            "",
            "}",
        ]);
        $file[] = '';


        $file[] = '## ConfiguraÃ§Ãµes';
        $file[] = 'As configuraÃ§Ãµes sÃ£o definidas na model \App\Models\Settings, no atributo $settingsKeys.';
        $file[] = 'LÃ¡ Ã© informado uma lista de configs que estÃ£o disponÃ­veis para serem alteradas.';
        $file[] = '';


        $file[] = '## PermissÃµes';
        $file[] = 'As permissÃµes sÃ£o definidas em `/config/permissions.php` na chave `keys`.';
        $file[] = 'Nesse local vocÃª precisa informar uma lista de arrays associativas `\'name\' => \'DescriÃ§Ã£o\'`.';
        $file[] = 'Name precisa ser obrigatoriamente o name da rota no backend ou o name do componente nuxt.';
        $file[] = 'O usuÃ¡rio entÃ£o sÃ³ poderar executar uma rota ou acessar uma view nuxt se aquele name estiver';
        $file[] = 'na sua lista de permissÃµes.';
        $file[] = '';
        $file[] = 'Todas as rotas nÃ£o pÃºblicas jÃ¡ sÃ£o protegidas pelo middleware de seguranÃ§a de permissÃ£o,';
        $file[] = 'entÃ£o para o backend vocÃª nÃ£o precisa fazer nada para que a permissÃ£o funcione.';
        $file[] = 'JÃ¡ no frontend vocÃª precisa informar ao nuxt que aquela pagina serÃ¡ protegida pelo';
        $file[] = 'middleware `permission`, que Ã© basicamente fazer como mostra abaixo:';
        $file[] = $this->cmd('html', [
            "<template>",
            "   ... content ...",
            "</template>",
            "",
            "<script>",
            "export default {",
            "   middleware: ['permission'],",
            "}",
            "</script>",
        ]);
        $file[] = '';
        
        
        $file[] = '## Templates de e-mail';
        $file[] = 'Crie uma classe de email em `app/Mail` seguindo as outras classes como exemplo.';
        $file[] = 'Ao configurar todos os atributos, execute o comando `php artisan app:sync` e deixe';
        $file[] = 'que o sistema se encarregue de popular este template de e-mail novo para o banco de dados.';
        $file[] = 'ApÃ³s isso, tudo o que vocÃª precisa fazer Ã© clicar em editar o template pelo admin.';
        $file[] = '';


        $file[] = '## Layouts frontend';
        $file[] = '## ';
        
        
        $file[] = '## Componentes mais importantes';

        $file[] = '```html';
        $file[] = '<!-- /client/components/ui-form.vue -->';
        $file[] = '';
        $file[] = '<ui-form';
        $file[] = ' method="post"';
        $file[] = ' action="/api/products/save"';
        $file[] = ' v-model="product"';
        $file[] = ' #default="form"';
        $file[] = '>';
        $file[] = ' <!--';
        $file[] = ' Este componente apenas cria uma tag form com algumas funÃ§Ãµes a mais,';
        $file[] = ' portanto Ã© possÃ­vel trabalhar normalmente como em uma tag form';
        $file[] = ' como por exemplo, criando botÃµes type=submit para envio do formulÃ¡rio';
        $file[] = ' e disparÃ¡r o envio clicando enter em uma input.';
        $file[] = ' ';
        $file[] = ' ParÃ¢metros:';
        $file[] = '     method: get, post, etc... assim como no axios';
        $file[] = '     action: url do endpoint';
        $file[] = '     v-model: objeto que serÃ¡ enviado via post';
        $file[] = '     #default="form" variavel "form" com alguns dados internos do form como:';
        $file[] = '     form.loading: true ou false, informa se o form estÃ¡ em processamento';
        $file[] = '     form.response: dados da resposta, request.data do axios.';
        $file[] = '     form.error: mensagem de erro do form, em string';
        $file[] = '     form.errorFields: objeto javascript com erros de validaÃ§Ã£o, no formato {campo:["erro1", "erro2"]}';
        $file[] = '     form.submit: mÃ©todo submit() para envio do formulÃ¡rio';
        $file[] = '-->';
        $file[] = '</ui-form>';
        $file[] = '```';
        $file[] = '';


        $file[] = '```html';
        $file[] = '<!-- /client/components/ui/model/edit.vue -->';
        $file[] = '';
        $file[] = '<ui-model-edit';
        $file[] = ' model-name="products"';
        $file[] = ' model-id="153"';
        $file[] = ' singular="Produto"';
        $file[] = ' plural="Produtos"';
        $file[] = ' #default="form"';
        $file[] = '>';
        $file[] = ' <!--';
        $file[] = ' Este componente cria toda a interface bÃ¡sica para ediÃ§Ã£o de dados,';
        $file[] = ' fazendo toda a parte repetitiva e deixando para vocÃª apenas a tarefa';
        $file[] = ' de informar quais os parÃ¢metros bÃ¡sicos e como serÃ¡ o html dos campos.';
        $file[] = ' ';
        $file[] = ' ParÃ¢metros:';
        $file[] = '     model-name: Nome da model/table no formato kebab';
        $file[] = '     model-id: ID do registro (o sistema faz a requisiÃ§Ã£o automaticamente para /products/find/153 e te retorna o objeto)';
        $file[] = '     singular: Nome no singular para descriÃ§Ãµes';
        $file[] = '     plural: Nome no plural para descriÃ§Ãµes';
        $file[] = '     #default="form" variavel "form" com alguns dados internos do form como:';
        $file[] = '     form.value: dados da model que serÃ£o editados/enviados via post';
        $file[] = '     form.loading: true ou false, informa se o form estÃ¡ em processamento';
        $file[] = '     form.error: mensagem de erro do form, em string';
        $file[] = '     form.errorFields: objeto javascript com erros de validaÃ§Ã£o, no formato {campo:["erro1", "erro2"]}';
        $file[] = '-->';
        $file[] = '';
        $file[] = ' <!-- Insira os campos normalmente -->';
        $file[] = ' <ui-field label="Nome" :error="form.errorFields.owner">';
        $file[] = '     <input type="text" class="form-control" value="form.value.name" />';
        $file[] = ' </ui-field>';
        $file[] = '';
        $file[] = ' <!-- Os botÃµes na parte de baixo do formulÃ¡rio serÃ£o inseridos automaticamente, -->';
        $file[] = ' <!-- mas se vocÃª precisar customizar alguma aÃ§Ã£o, utilize esse slot: -->';
        $file[] = ' <slot name="actions">';
        $file[] = '     <button type="button" class="btn btn-success">';
        $file[] = '         AÃ§Ã£o customizada 1';
        $file[] = '     </button>';
        $file[] = '';
        $file[] = '     <button type="button" class="btn btn-success">';
        $file[] = '         AÃ§Ã£o customizada 2';
        $file[] = '     </button>';
        $file[] = ' </slot>';
        $file[] = '</ui-model-edit>';
        $file[] = '```';
        $file[] = '';


        $file[] = '```html';
        $file[] = '<!-- /client/components/ui/model/search.vue -->';
        $file[] = '';
        $file[] = '<ui-model-search';
        // $file[] = ' method="post"';
        // $file[] = ' action="/api/products/save"';
        // $file[] = ' v-model="product"';
        // $file[] = ' #default="form"';
        $file[] = '>';
        // $file[] = ' <!--';
        // $file[] = ' esse componente apenas cria uma tag form com algumas funÃ§Ãµes a mais,';
        // $file[] = ' portanto Ã© possÃ­vel trabalhar normalmente como em uma tag form';
        // $file[] = ' como por exemplo, criando botÃµes type=submit para envio do formulÃ¡rio';
        // $file[] = ' e disparÃ¡r o envio clicando enter em uma input.';
        // $file[] = ' ';
        // $file[] = ' ParÃ¢metros:';
        // $file[] = '     method: get, post, etc... assim como no axios';
        // $file[] = '     action: url do endpoint';
        // $file[] = '     v-model: objeto que serÃ¡ enviado via post';
        // $file[] = '     #default="form" variavel "form" com alguns dados internos do form como:';
        // $file[] = '     form.loading: true ou false, informa se o form estÃ¡ em processamento';
        // $file[] = '     form.response: dados da resposta, request.data do axios.';
        // $file[] = '     form.error: mensagem de erro do form, em string';
        // $file[] = '     form.errorFields: objeto javascript com erros de validaÃ§Ã£o, no formato {campo:["erro1", "erro2"]}';
        // $file[] = '     form.submit: mÃ©todo submit() para envio do formulÃ¡rio';
        // $file[] = '-->';
        $file[] = '</ui-model-search>';
        $file[] = '```';
        $file[] = '';


        $file[] = '```html';
        $file[] = '<!-- /client/components/ui/model/select.vue -->';
        $file[] = '';
        $file[] = '<ui-model-select';
        // $file[] = ' method="post"';
        // $file[] = ' action="/api/products/save"';
        // $file[] = ' v-model="product"';
        // $file[] = ' #default="form"';
        $file[] = '>';
        // $file[] = ' <!--';
        // $file[] = ' esse componente apenas cria uma tag form com algumas funÃ§Ãµes a mais,';
        // $file[] = ' portanto Ã© possÃ­vel trabalhar normalmente como em uma tag form';
        // $file[] = ' como por exemplo, criando botÃµes type=submit para envio do formulÃ¡rio';
        // $file[] = ' e disparÃ¡r o envio clicando enter em uma input.';
        // $file[] = ' ';
        // $file[] = ' ParÃ¢metros:';
        // $file[] = '     method: get, post, etc... assim como no axios';
        // $file[] = '     action: url do endpoint';
        // $file[] = '     v-model: objeto que serÃ¡ enviado via post';
        // $file[] = '     #default="form" variavel "form" com alguns dados internos do form como:';
        // $file[] = '     form.loading: true ou false, informa se o form estÃ¡ em processamento';
        // $file[] = '     form.response: dados da resposta, request.data do axios.';
        // $file[] = '     form.error: mensagem de erro do form, em string';
        // $file[] = '     form.errorFields: objeto javascript com erros de validaÃ§Ã£o, no formato {campo:["erro1", "erro2"]}';
        // $file[] = '     form.submit: mÃ©todo submit() para envio do formulÃ¡rio';
        // $file[] = '-->';
        $file[] = '</ui-model-select>';
        $file[] = '```';
        $file[] = '';
        
        
        $file[] = '## Estrutura do banco';
        $file[] = '<img src="database/schema.svg" alt="" width="100%" height="auto">';
        $file[] = '';


        $file[] = '## Endpoints';
        $file[] = 'Todas as rotas disponÃ­veis:';

        $content = '<table><tbody>';
        $content .= '<tr><td>NÂº</td><td>Methods</td><td>Route</td><td>Name</td><td>Public</td></tr>';
        foreach($this->getTables() as $table) {
            if ($this->isIgnoredTable($table->Name)) continue;
            foreach(app($table->Controller->NameFull)->getGeneratedRoutes() as $index => $route) {
                $content .= '<tr>';
                $content .= "<td>{$index}</td>";
                $content .= '<td>'. implode(', ', $route->methods) .'</td>';
                $content .= "<td>/api/{$route->path}</td>";
                $content .= "<td>{$route->name}</td>";
                $content .= '<td>'. ($route->is_public? 'ok': '') .'</td>';
                $content .= '</tr>';
            }
        }
        $content .= '</tbody></table>';

        $file[] = $content;
        $file[] = '';
        
        file_put_contents(base_path('README.md'), implode("\n", $file));
    }

    public function cmd($type, $code)
    {
        $code = is_array($code)? implode("\n", $code): $code;
        return "```{$type}\n{$code}\n```";
    }
}
