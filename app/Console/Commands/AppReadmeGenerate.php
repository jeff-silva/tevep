<?php

// TODO: Rotas definidas nos controllers
// TODO: api.php gerado automaticamente
// TODO: Melhoria nos componentes ui-file, ui-file-id e ui-file-select

namespace App\Console\Commands;

class AppReadmeGenerate extends AppBase
{

    protected $signature = 'app:readme-generate';
    protected $description = 'Gera documenta√ß√£o';

    public function handle() {
        $tables = $this->getTables();
        
        $file = [ '# '. env('APP_NAME') ];

        $file[] = '## Instala√ß√£o';
        $file[] = 'Insira os dados do banco no arquivo `.env` e ent√£o execute';
        $file[] = 'os comandos abaixo, que respectivamente s√£o para:';
        $file[] = '* Instalar depend√™ncias do laravel';
        $file[] = '* Criar tabelas, models, controllers, views e registros do banco';
        $file[] = '* Acessar pasta `/client`';
        $file[] = '* Instalar depend√™ncias javascript nesta pasta';

        $file[] = $this->cmd('bash', [
            'php composer install',
            'php artisan app:sync',
            'cd client',
            'npm install',
        ]);

        $file[] = '';

        $file[] = '## Desenvolvimento';
        $file[] = 'O comando abaixo executa backend+frontend juntos:';
        $file[] = $this->cmd('bash', 'npm run serve');
        $file[] = '';


        $file[] = '## Deploy';
        $file[] = 'O comando abaixo faz a build e prepara a aplica√ß√£o para publica√ß√£o';
        $file[] = $this->cmd('bash', 'npm run build');
        $file[] = '';


        $file[] = '## Criando tabelas no banco';
        $file[] = 'Criar tabelas na m√£o pode ser um pouco ma√ßante, mesmo utilizando sua ferramente favorita para gerenci√°-las.';
        $file[] = 'Execute o comando abaixo para criar uma tabela b√°sica, e a partir dela modelar conforme necess√°rio:';
        $file[] = $this->cmd('bash', 'php artisan app:table-generate');
        $file[] = 'O comando ir√° lhe pedir um nome para a tabela, e a partir disso,';
        $file[] = 'ger√°-la com as colunas `id, slug, name, created_at, updated_at e deleted_at`.';
        $file[] = 'Voc√™ pode renomear ou remover alguma dessas colunas caso necess√°rio,';
        $file[] = '**embora seja fortemente sujerido que voc√™ as mantenha**, visto que';
        $file[] = 'o sistema as usa para que voc√™ precise digitar o m√≠nimo de c√≥digo poss√≠vel.';
        $file[] = '';
        $file[] = 'N√£o se esque√ßa de executar o comando abaixo assim que criar ou modificar uma tabela';
        $file[] = 'para que o sistema gere ou customize as models, controllers e views para voc√™';
        $file[] = $this->cmd('bash', 'php artisan app:sync');
        $file[] = '';


        $file[] = '## Models';
        $file[] = 'Estas s√£o todas as models dispon√≠veis no sistema:';
        $file[] = '```php';
        foreach($tables as $table) {
            if ($this->isIgnoredTable($table->Name)) continue;
            $file[] = "{$table->Model->NameFull};";
        }
        $file[] = '```';
        $file[] = '';


        $file[] = '## Customizando models';
        $file[] = 'Todas as models tem essa estrutura b√°sica';
        $file[] = $this->cmd('php', [
            '<?php',
            '',
            'namespace App\Models;',
            '',
            '// Nomes de model s√£o sempre gerados no plural, igual as tabelas',
            'class Products extends \Illuminate\Database\Eloquent\Model {',
            "",
            "   use \App\Traits\Model;",
            "   ",
            "   // Nomes de tabelas sempre no plural",
            "   protected \$table = 'products';",
            "   protected \$fillable = ['id', 'slug', 'name', 'price', 'created_at', 'updated_at', 'deleted_at'];",
            "",
            "   /*",
            "    * Esse m√©todo √© sempre executado antes de salvar dados",
            "    * para for√ßar que valores sigam um determinado padr√£o.",
            "    * Voc√™ ainda pode utilizar mutators normalmente, esse m√©todo",
            "    * foi criado apenas para simplificar a vida.",
            "    */",
            "   public function toInput()",
            "   {",
            "       \$this->price = \$this->price? \$this->price: 0;",
            "   }",
            "",
            "   /*",
            "    * Todas as buscas s√£o feitas pelo m√©todo ->search() da model,",
            "    * e para que esse m√©todo funcione bem, precisamos informar a ele",
            "    * quais s√£o os par√¢metros padr√£o para uma busca. Os par√¢metros informados",
            "    * aqui ser√£o mergeados a outros par√¢metros b√°sicos, como q, page, perpage,",
            "    * order, orderby e outros.",
            "    */",
            "   public function searchParams(\$params=[])",
            "   {",
            "       return [",
            "           'price_min' => null",
            "           'price_max' => null",
            "       ];",
            "   }",
            "",
            "   /*",
            "    * Como j√° explicado, todas as buscas s√£o feitas pelo m√©todo ->search()",
            "    * e aqui vamos customizar a \$query de busca antes que ela seja entregue",
            "    * para o ->search() executar. Trabalhar dessa forma √© interessante porque",
            "    * voc√™ vai reaproveitar muito mais concentrando toda a l√≥gica de busca aqui",
            "    * em vez de ficar copiando e colando linhas e mais linhas de queryBuilder",
            "    * todas as vezes que precisar fazer uma busca nova.",
            "    */",
            "   public function searchQuery(\$query, \$params)",
            "   {",
            "       if (\$params->price_min) {",
            "           \$query->where('price', '>=', \$params->price_min);",
            "       }",
            "",
            "       if (\$params->price_max) {",
            "           \$query->where('price', '<=', \$params->price_max);",
            "       }",
            "   }",
            '}',
        ]);
        $file[] = 'Essa estrutura √© gerada automaticamente quando voc√™ cria uma tabela.';
        $file[] = 'A array `protected $fillable` tamb√©m √© alterada quando voc√™ cria/remove alguma';
        $file[] = 'no banco e executa `php artisan app:sync`.';
        $file[] = 'Voc√™ pode criar seus m√©todos, casts, mutators e o que mais for necess√°rio';
        $file[] = 'para sua model aqui normalmente. A √∫nica exig√™ncia das models s√£o:';
        $file[] = '**N√ÉO REMOVA A TRAIT MODEL**. Ela √© respons√°vel por muitas coisas que v√£o te ajudar';
        $file[] = 'a ter menos dor de cabe√ßa para desenvolver.';
        $file[] = '';


        $file[] = '## Busca';
        $file[] = 'Sempre que voc√™ precisar buscar dados nos bancos, √© aconselh√°vel usar o';
        $file[] = 'm√©todo `->search()` da model. Porque? Porqu√™ √© mais interessante concentrar';
        $file[] = 'toda a l√≥gica de busca em um m√©todo s√≥, em vez de ficar duplicando linhas de';
        $file[] = 'queryBuilder toda vez que precisar listar itens novamente.';
        $file[] = $this->cmd('php', '$query = $model->search();');
        $file[] = 'Este m√©todo retorna um queryBuilder, ent√£o voc√™ j√° deve ter compreendido que';
        $file[] = 'com esse valor que retorna, voc√™ pode executar um `->paginate()` para obter dados';
        $file[] = 'paginados, um `->get()` para recuperar todos os itens poss√≠veis ou um `->first()`';
        $file[] = 'para obter apenas o primeiro registro.';
        $file[] = $this->cmd('php', [
            '$item = $model->search()->first();',
            '$items = $model->search()->get();',
            '$data = $model->search()->paginate(15);',
        ]);
        $file[] = 'Voc√™ tamb√©m pode concatenar outros m√©todos, mas se voc√™ quer ter um c√≥digo';
        $file[] = 'reaproveit√°vel, talvez seja melhor criar um novo parm√¢metro em `searchParams`';
        $file[] = 'e programar a l√≥gica desse par√¢metro em `searchQuery`.';
        $file[] = $this->cmd('php', [
            '// Funciona, mas voc√™ sempre vai ter que inserir esse where üôÑ',
            '$item = $model->search()->where(\'status\', \'public\')->get();',
            '',
            '// Programando em searchParams e searchQuery fica mais reaproveit√°vel üòé',
            '$item = $model->search([\'status\' => \'public\'])->get();',
        ]);
        $file[] = '';


        $file[] = '## Controllers';
        $file[] = 'Estes s√£o todos os controllers dispon√≠veis no sistema:';
        $file[] = '```php';
        foreach($tables as $table) {
            if ($this->isIgnoredTable($table->Name)) continue;
            $file[] = "{$table->Controller->NameFull};";
        }
        $file[] = '```';
        $file[] = '';


        $file[] = '## Customizando controllers';
        $file[] = 'Note que o arquivo `/routes/api.php` √© bem limpo: tem apenas';
        $file[] = 'alguns controllers sendo instanciados e um aviso de "n√£o edite":';
        $file[] = $this->cmd('php', file_get_contents(base_path('routes/api.php')));
        $file[] = 'Este arquivo √© gerado sempre que voc√™ executa `php artisan app:sync`,';
        $file[] = 'por isso √© uma m√° ideia edit√°-lo. Isso acontece porque as rotas';
        $file[] = 's√£o definidas no pr√≥prio controller. As fun√ß√µes b√°sicas est√£o comentadas:';
        $file[] = $this->cmd('php', [
            "<?php",
            "",
            "namespace App\Http\Controllers;",
            "",
            "class ProductsController extends Controller",
            "{",
            "	public function __construct()",
            "	{",
            "		/*",
            "		 * Refer√™ncia para as rotas herdadas da classe Controller saberem",
            "		 * com qual model est√£o trabalhando.",
            "		 */",
            "		\$this->model = new \App\Models\Products;",
            "",
            "		/*",
            "		 * Aqui est√° sendo declarado que todas as rotas deste controller",
            "		 * ser√£o protegidas pelo middleware de autentica√ß√£o,",
            "		 * exceto as rotas search e find que ser√£o p√∫blicas.",
            "		 */",
            "		\$this->middleware('auth:api', [",
            "			'except' => ['search', 'find'],",
            "		]);",
            "",
            "		/*",
            "		 * Criando rotas automaticamente:",
            "		 * Este m√©todo cria rotas b√°sicas em comum para todos os controllers,",
            "		 * como save, search, find, delete, clone e alguns outros.",
            "		 * Note o argumento \"except\": ele define quais dessas rotas",
            "		 * n√£o devem ser criadas. O exemplo abaixo define que este controller",
            "		 * n√£o ter√° a rota /delete.",
            "		 */",
            "		\$this->defaultRoutes([",
            "		    'except' => ['delete'],",
            "		]);",
            "",
            "		/*",
            "		 * Aqui voc√™ pode definir rotas customizadas.",
            "		 * As rotas sempre ser√£o criadas tomando como base o nome do controller",
            "		 * convertido para kebab case sem o sufixo \"Controller\". Ou seja:",
            "		 * ExamplesController       =>  /api/examples/ ",
            "		 * ExamplesTestsController  =>  /api/examples-tests/ ",
            "		 * ",
            "		 * Conforme o exemplo dado, todas as rotas ser√£o criadas",
            "		 * dentro de /api/products.",
            "		 * ",
            "		 * par√¢metro 1 = m√©todo (pode ser array ['get', 'post'] por exemplo)",
            "		 * par√¢metro 2 = rota",
            "		 * par√¢metro 3 = m√©todo do controller que ser√° executado",
            "		 */",
            "",
            "		// POST: /api/products/{productId}/promo-add",
            "		\$this->route('post', '/{productId}/promo-add', 'promoAdd');",
            "",
            "		// GET: /api/products/{productId}/promo-remove/{promoId}",
            "		\$this->route('get', '/{productId}/promo-remove/{promoId}', 'promoRemove');",
            "	}",
            "",
            "   public function promoAdd(\$productId)",
            "   {",
            "       return ['bla bla bla'];",
            "   }",
            "",
            "   public function promoRemove(\$productId, \$promoId)",
            "   {",
            "       return ['bla bla bla'];",
            "   }",
            "",
            "}",
        ]);
        $file[] = '';


        $file[] = '## Configura√ß√µes';
        $file[] = 'As configura√ß√µes s√£o definidas na model \App\Models\Settings, no atributo $settingsKeys.';
        $file[] = 'L√° √© informado uma lista de configs que est√£o dispon√≠veis para serem alteradas.';
        $file[] = '';


        $file[] = '## Permiss√µes';
        $file[] = 'As permiss√µes s√£o definidas em `/config/permissions.php` na chave `keys`.';
        $file[] = 'Nesse local voc√™ precisa informar uma lista de arrays associativas `\'name\' => \'Descri√ß√£o\'`.';
        $file[] = 'Name precisa ser obrigatoriamente o name da rota no backend ou o name do componente nuxt.';
        $file[] = 'O usu√°rio ent√£o s√≥ poderar executar uma rota ou acessar uma view nuxt se aquele name estiver';
        $file[] = 'na sua lista de permiss√µes.';
        $file[] = '';
        $file[] = 'Todas as rotas n√£o p√∫blicas j√° s√£o protegidas pelo middleware de seguran√ßa de permiss√£o,';
        $file[] = 'ent√£o para o backend voc√™ n√£o precisa fazer nada para que a permiss√£o funcione.';
        $file[] = 'J√° no frontend voc√™ precisa informar ao nuxt que aquela pagina ser√° protegida pelo';
        $file[] = 'middleware `permission`, que √© basicamente fazer como mostra abaixo:';
        $file[] = $this->cmd('html', [
            "<template>",
            "   ... content ...",
            "</template>",
            "",
            "<script>",
            "export default {",
            "   middleware: ['permission'],",
            "}",
            "</script>",
        ]);
        $file[] = '';
        
        
        $file[] = '## Templates de e-mail';
        $file[] = 'Crie uma classe de email em `app/Mail` seguindo as outras classes como exemplo.';
        $file[] = 'Ao configurar todos os atributos, execute o comando `php artisan app:sync` e deixe';
        $file[] = 'que o sistema se encarregue de popular este template de e-mail novo para o banco de dados.';
        $file[] = 'Ap√≥s isso, tudo o que voc√™ precisa fazer √© clicar em editar o template pelo admin.';
        $file[] = '';


        $file[] = '## Endpoints';
        $file[] = 'Todas as rotas dispon√≠veis:';

        $table = [['N¬∫', 'METHODS', 'NAME', 'ROUTE']];
        foreach(\Route::getRoutes() as $index => $item) {
            if ($item->uri=='{path}') continue;
            if (\Str::startsWith($item->uri, '_ignition')) continue;
            if (\Str::startsWith($item->uri, 'sanctum')) continue;

            $methods = $item->methods();
            $search = array_search('HEAD', $methods);
            if ($search!==false) unset($methods[$search]);

            $table[] = [
                $index,
                implode(',', $methods),
                $item->getName(),
                $item->uri(),
            ];
        }

        $file[] = $this->makeTable($table);

        

        file_put_contents(base_path('README.md'), implode("\n", $file));
    }

    public function cmd($type, $code)
    {
        $code = is_array($code)? implode("\n", $code): $code;
        return "```{$type}\n{$code}\n```";
    }

    public function makeTable($items=[])
    {
        // $fieldSize = [];

        // foreach($items as $i => $row) {
        //     foreach($row as $ii => $value) {
        //         $fieldSize[$ii] = isset($fieldSize[$ii])? $fieldSize[$ii]: 0;
        //         $fieldSize[$ii] = max($fieldSize[$ii], strlen($value));
        //     }
        // }

        // $table[] = "```text\n";
        // foreach($items as $i => $row) {
        //     $table[] = '| ';
        //     foreach($row as $ii => $value) {
        //         $table[] = str_pad($value, $fieldSize[$ii], ' ');
        //         $table[] = ' | ';
        //     }
        //     $table[] = "\n";
        // }
        // $table[] = '```';

        // return implode('', $table);


        $content = '<table width="100%"><tbody>';
        foreach($items as $i => $row) {
            $content .= '<tr>';
            foreach($row as $ii => $value) {
                $content .= "<td>{$value}</td>";
            }
            $content .= '</tr>';
        }
        $content .= "</tbody></table>";

        return $content;
    }
}
